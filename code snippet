#include <iostream>
#include <string>

#define S_OK 0
#define E_INVALID_RADIUS 1
#define E_TOO_LARGE_RADIUS 2

class Exception {
public:
	Exception(int errcode, std::string message)
		: m_errcode(errcode), m_message(message) {}
public:
	int GetErrCode() const { return m_errcode; }
	std::string GetMessage() const { return m_message; }
private:
	int m_errcode;
	std::string m_message;
};

class InvalidRadiusException : public Exception {
public:
	InvalidRadiusException() : Exception(E_INVALID_RADIUS, "Radius was incorrect.") {}
};

class TooLargeRadiusException : public Exception {
public:
	TooLargeRadiusException() : Exception(E_TOO_LARGE_RADIUS, "Radius is too large.") {}
};

double CalculateArea(int radius);

int main() {
	try {
		int radius = 101;
		double area = CalculateArea(radius);
		std::cout << "Area of circle is " << area << std::endl;
	}
	catch (InvalidRadiusException& e) {
		std::cout << e.GetMessage() << std::endl;
	}
	catch (TooLargeRadiusException& e) {
		std::cout << e.GetMessage() << std::endl;
	}
	catch (Exception& e) {
		std::cout << e.GetMessage() << std::endl;
	}
	return 0;
}

double CalculateArea(int radius) {
	if (radius <= 0) {
		throw InvalidRadiusException();
	}
	else if (radius > 100) {
		throw TooLargeRadiusException();
	}
	return 3.14 * radius * radius;
}
