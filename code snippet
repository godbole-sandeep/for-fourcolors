#include <iostream>

class Base {
public:
    // Default constructor
    Base() : m_baseData(0) {
        std::cout << "Base default constructor called" << std::endl;
    }

    // Parametric constructor
    Base(int baseData) : m_baseData(baseData) {
        std::cout << "Base parametric constructor called" << std::endl;
    }

    // Copy constructor
    Base(const Base& other) : m_baseData(other.m_baseData) {
        std::cout << "Base copy constructor called" << std::endl;
    }

    // Copy assignment operator
    Base& operator=(const Base& other) {
        if (this != &other) {
            m_baseData = other.m_baseData;
            std::cout << "Base copy assignment operator called" << std::endl;
        }
        return *this;
    }

    // Destructor
    ~Base() {
        std::cout << "Base destructor called" << std::endl;
    }

private:
    int m_baseData;
};

class Derived : public Base {
public:
    // Default constructor
    Derived() : m_derivedData(0.0) {
        std::cout << "Derived default constructor called" << std::endl;
    }

    // Parametric constructor
    Derived(int baseData, double derivedData) : Base(baseData), m_derivedData(derivedData) {
        std::cout << "Derived parametric constructor called" << std::endl;
    }

    // Copy constructor
    Derived(const Derived& other) : Base(other), m_derivedData(other.m_derivedData) {
        std::cout << "Derived copy constructor called" << std::endl;
    }

    // Copy assignment operator
    Derived& operator=(const Derived& other) {
        if (this != &other) {
            Base::operator=(other);
            m_derivedData = other.m_derivedData;
            std::cout << "Derived copy assignment operator called" << std::endl;
        }
        return *this;
    }

    // Destructor
    ~Derived() {
        std::cout << "Derived destructor called" << std::endl;
    }

private:
    double m_derivedData;
};

int main() {
    Derived d1;
    Derived d2(10, 3.14); // Parametric constructor
    Derived d3;
    d3 = d2; // Copy assignment operator
    return 0;
}

/*
What are the key points to note in the program above?
- The default constructor of a derived class calls the default constructor of the base class.
- The copy constructor of a derived class calls the copy constructor of the base class.
- The parametric constructor of a derived class calls the parametric constructor of the base class.
- The assignment operator of a derived class calls the assignment operator of the base class.
*/
